Detailing the implementation of the code.

2025/05/03 12:53

Until now we have a code with the following aspects implemented: 

    - PrimaryGeneratorCRY.

The CRY library is implemented in the code to generate cosmic rays. 

Until now we can get a set of particles coming from the top of the 
world volume with a given direction provided by the CRY library.

? Most of the particles are not arriving to the detector ? Also probably
interesting to simulate the quantum processor to have control of the 
cosmic rays passing through it ??

+ We are not taking care of the times in which the paricles are being 
generated, probably importat for later reconstruction of the cosmic 
ray tracks ?? This can be implemented by simulating a poisson distribution
for the times of the particles.


    - DetectorConstruction and SensitiveDetector.

We have created a detector that consists of two layers of bars, covered 
in a plastic material. 

The bars are set as sensitive detectors to record the energy deposit of the
particles within the bars.

+ The following step would be to define a function to handle manually the 
conversion of the deposited energy into 'optical photons' that travel
along the bar to both extremes and record the arrival time for both 
to reconstruct the track of the incident particle.

+ Probably a implementation of the bar's material as scintillators to let 
g4 handle the internal process of converting the pass of the incident 
particles into optical photons is convenient.

2025/05/05 12:55

    - DetectorMessenger.

Adding a new class to implement the option of choosing the approch to 
follow when simulating the optical photons generated by the 
scintillator material. 

Until now the g4 internal implementation seems to work.

+ Next step should probably be adding manually post processing 
to generate the photons without using g4 optical scintillator method.



